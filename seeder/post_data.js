var posts = [
    {
      'content': '<div class="markdown-text"><h1>发票</h1>\n<p>先说发票问题，发票问题每年都是JSConf 中国的痛点，作为一个非营利性的野生技术协会，由于组委会自己没有合法的主体，例如合法NGO，所以我们只能依靠其他公司如 Wiredcraft 公司或者其他第三方平台如 售票网站代开发票。所以每年在发票的问题上都会给很多同学造成困扰，对此我谨代表组委会给大家道歉。\n而每年我们也都在想办法优化这个流程，希望能够以最简单的方法解决这个问题，对于今年我们的方案是寻求一个合作伙伴帮我们代开发票，然后在会前给我们所有发票，以方便需要发票的同学能够现场取得发票。但是意外时有发生，会前的前一天代理公司告诉我无法提供约定的发票。当时情况我也很愤怒，但是愤怒于事无补，只得竟可能的和代理商沟通积极寻求好的方案，但是结果并不如预期想的那样，我们依然没有取得所有的发票。所以我想再次对想要在会场上拿到发票的同学说声抱歉。\n发票的事情我们组委会也并不推卸责任，寻求靠谱的合作伙伴本就是我们的责任，既然事情发生了我们也不推脱，只想积极寻求解决问题。现在的解决方法是：</p>\n<ol>\n<li>对于已经打出发票尚未领取的同学，我们这边会电话联系寻求邮寄地址后于两日内寄出。</li>\n<li>对于尚未打出发票的同学，我们会邮件询问邮寄地址（希望这部分同学可以查看下邮箱），并与本周内寄出（对于这部分同学我们会在 “JSConf 中国 2017” 的大会门票中给予相应的折扣）。</li>\n</ol>\n<h1>大会总结</h1>\n<p>以下内容转载自云栖社区，作者：贺科学 （已得到作者授权）\n原文链接，<a href="https://yq.aliyun.com/tags/type_blog-tagid_14321/">https://yq.aliyun.com/tags/type_blog-tagid_14321/</a></p>\n<p><strong>详细的 keynote/ppt 请到我们的官方网站 <a href="http://2016.jsconf.cn">http://2016.jsconf.cn</a> 下载查看。</strong></p>\n<h2>9月3日上午</h2>\n<h3>VUE.js</h3>\n<h4>讲师</h4>\n<p>尤雨溪， Vue.js的作者</p>\n<h4>主题</h4>\n<ul>\n<li>progressive framework （其实是说通过多角色的工具库类逐渐补充核心层的能力）</li>\n<li>core : decirative rendering</li>\n<li>component system</li>\n<li>routing</li>\n<li>large scale state management</li>\n<li>build system</li>\n<li>client-server data persistence</li>\n<li>vue 2.0</li>\n<li>server bundle -&gt; stream handle</li>\n<li>virtual dom in vue</li>\n<li>template =&gt; render function，setting up virtual dom.</li>\n<li>server side rendering</li>\n<li>“weex inspired by vue” become “weex powered by vue”</li>\n<li>vue.js 2.0 acting as the runtime framework for weex</li>\n<li>writing components which can run both on vue.js and weex, whitch means both web side and native side</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>从讲师的内容来看未来前端框架（不是前端技术或者web开发的趋势，仅仅是框架的发展趋势）的发展趋势： virtual dom、资源整合与共享（vue与weex的合作）</li>\n<li>框架演进的思路，渐进式地去完善一个框架，这样可以在各种维度满足各种需求的开发者，因为不同层次的组件都可以使用符合规范的替代品，从而对开发者当前的技术积累和习惯带来尽可能小的影响。</li>\n</ul>\n<h4>感想</h4>\n<p>一个框架从诞生到发展为国内最新最热的前端基础设施，vuejs的成功让人看到了一个开发者的坚持与成长。就这一点而言，对我的触动很大。很多时候也许确实不应该想那么多，先动手做，然后路自然就通了。</p>\n<h3>HOW TO BUILD A COMPILER</h3>\n<h4>讲师</h4>\n<p>James Kyle from Facebook, main contributor of flow and babel</p>\n<h4>主题</h4>\n<ul>\n<li>what is a compiler</li>\n<li>what dose a compiler do</li>\n<li>traverse</li>\n<li>visitor</li>\n<li>词法分析</li>\n<li>语法分析</li>\n<li>抽象语法树</li>\n<li>parsing</li>\n<li>transformation</li>\n<li>code generation</li>\n<li>code reivew (通过展示代码的方式讲解编译器要做的几件事情以及对应的函数)</li>\n<li>old ast =&gt; new ast(javascript) (将抽象语法树转换为某种语言的新的抽象语法树，当前代码以JavaScript为例)</li>\n<li>tokenizer (关键字识别处理)</li>\n<li>parser token -&gt; ast (识别输入字符串的关键字，生成抽象语法树)</li>\n<li>traverser ？？TODO: 待订正</li>\n<li>transformer</li>\n<li>code generator (生成对应的代码)</li>\n<li>compiler （将上面的几步编排起来，依次调用，得出最终的结果）</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>编译器的各个环节的基本业务逻辑，即各个环节“要干什么事情”</li>\n<li>讲师在开场铺垫时，讲了一些如何学习新技术的经历，可以关注一下</li>\n</ul>\n<h4>感想</h4>\n<p>国外讲师的PPT风格总是会让人耳目一新，也正展现了他作为一个极客放荡不羁、特立独行的一面（红蓝配看久了真的很伤眼……）。在整个讲解如何实现一个编译器的过程中，每个环节都讲得比较清晰，并且结合一个非常简单的代码示例来让听众明白编译器从0到1的过程，做到了深入浅出。编译器的整个处理流程在一些复杂的自定义业务逻辑处理场景中有着非常重要的作用，期待未来能有一个通用编译器，可以让开发者自己定义自己的 语言关键字、语法规则、对应的处理逻辑，这件事可以想象的空间还是很大的，需要对 James 的例子再做一次抽象。</p>\n<h3>阿里node 团队开源项目，企业级框架EGG</h3>\n<h4>讲师</h4>\n<p>天猪 from Alibaba UC Group，eggjs</p>\n<h4>主题</h4>\n<ul>\n<li>nodejs在阿里内部的应用历史与发展历程的介绍</li>\n<li>EGG定义了若干规范</li>\n<li>具备强大的插件系统</li>\n<li>找准了一些企业级web框架应该关注的若干个领域，通过插件机制来针对性地完成支持，从而构建出理想中的企业级应用框架，以下为几个例子：</li>\n<li>node 实现java 的rpc框架，序列号、反序列化、服务治理等等</li>\n<li>安全</li>\n<li>跨语言RPC</li>\n<li>日志</li>\n<li>标准的开源社区协作模式</li>\n<li>workflow</li>\n<li>ut</li>\n<li>code style lint</li>\n<li>开发期辅助</li>\n<li>痛点的总结和分析，从而推导出合理的做法</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>企业级应用框架在各个领域需要关注的点，特别是生产环境的安全问题、日常维护与排错过程中需要使用到的日志系统等方面</li>\n</ul>\n<h4>感想</h4>\n<p>其实能知道EGG在开发过程中遇到的各种各样的难题，特别是在与已有的中间件系统做对接，服务发现与治理等方面一定有很多技术闪光点在里面，但是可能是由于时间和主题的限制，这样的技术点讲解的有点泛泛，其实可以减少框架介绍性的陈述，使用关键几个技术核心点来让听者感知到EGG的技术深度。</p>\n<h3>聊聊 JS 测试框架</h3>\n<h4>讲师</h4>\n<p>严清 from Teambition</p>\n<h4>主题</h4>\n<ul>\n<li>开始补充了 toa 的相关feature，基于koa</li>\n<li>QUIC 在nodejs上的实现：目前正在研发的“下一代协议”</li>\n<li>链接迁移，移动端切换网络的常见具备实际应用的价值</li>\n<li>测试框架流派</li>\n<li>tap</li>\n<li>tape</li>\n<li>ava</li>\n<li>jasmine</li>\n<li>mocha</li>\n<li>jest</li>\n<li>mocha 流</li>\n<li>tape 流</li>\n<li>测试框架的核心和补充工具</li>\n<li>流程控制</li>\n<li>“新轮子”</li>\n<li>从外观上看，在原有的mocha基础上，新增对 async/await 、 yield 、observable 三种异步形式的支持。</li>\n<li>tman</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>完整的测试框架执行流程的讲解部分</li>\n<li>运行上下文状态机</li>\n</ul>\n<h4>感想</h4>\n<p>前端的任何一个技术领域深入以后都会有很多很深入的技术细节令人着迷，在开发过程中所遇到的所有的令人困扰的问题在解决之后都会变成让人情绪亢奋的兴奋点，也正是这种感觉让开发人员能够持续而深入地投入到自己所喜爱的事情中去。一件微小的事情，一个细分的技术方向，解决好了，沉入其中，自然会有广阔的天地，相比自己之前的日常工作，浪费了太多的精力和心血在没有价值的事情上。</p>\n<h2>9月3日下午</h2>\n<h3>Gridcontrol —— networked process managers</h3>\n<h4>讲师</h4>\n<p>Alexandre Strzelewicz, pm2的作者，cto of <a href="http://keymitrics.io">keymitrics.io</a></p>\n<h4>主题</h4>\n<ul>\n<li>PM2</li>\n<li>originised application</li>\n<li>ecosystem.json</li>\n<li>PM2 V2 will be released in September.</li>\n<li>grid-control</li>\n<li>multi DNS + DHT</li>\n<li>wide area discovery (accorss subnet)</li>\n<li>microservice is hot but hard</li>\n<li>serverless framework</li>\n<li>AWS Lambda</li>\n<li>process manager + network layer</li>\n<li>networked file system</li>\n<li>distributed messaging</li>\n<li>setup a Grid</li>\n<li>gridfile</li>\n<li>provisioning</li>\n<li>grid dash</li>\n<li>demo time</li>\n<li>open source on site ### 关注点\n解决微服务存在的若干问题的思路: pm2(cpu、线程管理能力) + grid control</li>\n</ul>\n<h4>感想</h4>\n<ul>\n<li>国外的讲师总能给人以惊喜，Alexandre 在分享现场把 GridControl 开源给我的鼓舞非常巨大，让我感受到了这些开发者在开源之路上体现出的文化以及他们无私分享的精神。</li>\n</ul>\n<h3>3D on the web</h3>\n<h4>讲师</h4>\n<p>罗诗亚, developer advocate at Autodesk</p>\n<h4>主题</h4>\n<ul>\n<li>graphics pipeline</li>\n<li>vertex shader (code interactive)</li>\n<li>primitive assembly</li>\n<li>rasterization</li>\n<li>fragment shader（code interactive）</li>\n<li>freame buffer</li>\n<li>an easy way for 3D on the web —— three.js</li>\n<li>scene 、 camera、renderer、controls</li>\n<li>put a stuff in the scene</li>\n<li>animate</li>\n<li>getting started</li>\n<li>codereview</li>\n<li>demo show</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>setTimeout 和 requestAnimationFrame 在浏览器动画渲染中的差别</li>\n<li>demo演示 和 演示示例背后的技术细节</li>\n<li>基于three.js的开发所形成的生产力</li>\n</ul>\n<h4>感想</h4>\n<p>图形化的demo非常有感染力，在诗亚展示的若干个示例中，让在场的所有人感受到了web开发在3D图形领域可以做到多么精细酷炫。其实在理想的世界里，抛开商业上的各种考量和顾虑，诗亚以及她所在的团队基于three.js开发的一些功能和效果，如果经过抽象优化后能够开源，相信会给技术社区带来新的活力，特别是结合 web VR，充分利用二者在各自领域的技术优势，前景更让人充满期待。</p>\n<h3>A-Frame, Building Virtual Reality on the Web</h3>\n<h4>讲师</h4>\n<p>Kevin Ngo from Mozilla | <a href="http://mozvr.com">mozvr.com</a> | <a href="http://aframe.io">aframe.io</a></p>\n<h4>主题</h4>\n<ul>\n<li>Virtual Reality</li>\n<li>传统 VR 和 WEB VR的对比</li>\n<li><a href="https://w3c.github.io/webvr">https://w3c.github.io/webvr</a></li>\n<li>metaverse: 虚拟世界</li>\n<li>magicVoxel</li>\n<li>entity-component-system (有对应的扩展机制自定义自己的组件)</li>\n<li>使用VR技术的一些案例 ### 关注点</li>\n<li>创建webvr的若干步骤</li>\n<li>a-frame 框架</li>\n</ul>\n<h3>感想</h3>\n<p>听了Kevin的分享，感触最深的是两点，一是听过之前 3D on the web分享之后，再听 web VR 的分享，感觉web开发在目前最新的技术潮流中并没有缺席，反而利用其自身的优势在促进新兴技术的发展；二是在讲解使用WEB VR技术做的一些实际案例中，作品 afraid of sky （部分名称），利用VR技术向世人展示战争的残酷和血腥，呼吁和平。技术也许不能拯救世界，但是可以通过一点点的努力改变世界</p>\n<h3>Building a Unified Frontend and Mobile Team</h3>\n<h4>讲师</h4>\n<p>郭达峰 @上线了: <a href="http://sxl.cn">sxl.cn</a></p>\n<h4>主题</h4>\n<ul>\n<li>关于 react , react native</li>\n<li>前端UI层的虚拟机，用来屏蔽各端差异</li>\n<li>react native带来的变革</li>\n<li>跨端组件差异</li>\n<li>原生模块的补充 （使用 typescript 定义组件接口，在react中使用）</li>\n<li>由技术变革引发的团队架构变革（很多情况下，反之也成立）</li>\n<li>react native 能给以往的组织结构、分工方式带来新的可能性</li>\n<li>跨端的工程化，代码复用率</li>\n<li>前端开发发展的另外一个趋势，在适合的业务场景下，融合其他“端”，促进其他 “端”</li>\n<li>react native 年轻的生态系统</li>\n<li>第三方库受到react的影响</li>\n<li>第三方库的不完善</li>\n<li>打造全端团队需要的成员</li>\n<li>具备native开发经验</li>\n<li>好奇心强，愿意深入细节深入源码</li>\n<li>对未来的一个展望</li>\n<li>可以预料到的趋势</li>\n<li>会遇到阻力，来源于现有的组织结构与人员分配 —— 用实践突破困境</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>围绕移动web产生的一些工具、系统，方便开发者进行移动开发，与原来的前端开发生态相比，更多的人和精力投入到对web开发的支持中。</li>\n<li>团队建设</li>\n</ul>\n<h4>感想</h4>\n<p>听到这个时候，基本上可以从今年的这些分享中看到未来前端开发技术发展的几个趋势，\n多端开发融合在历史包袱不重的团队中会逐渐成为技术选型的主流\n开发框架的相互促进、借鉴、合作和相互弥补从而共建技术生态社区也是一个可能的趋势\nweb开发在可预料的时间范围内会继续利用自身优势涉足热门技术领域，并且丰富相应的技术应用场景</p>\n<h3>Building asynchronous microservices that get along</h3>\n<h4>讲师</h4>\n<p>Makara Wang from Wiredcraft</p>\n<h4>主题</h4>\n<ul>\n<li>微服务</li>\n<li>微服务的交互</li>\n<li>restful接口提供服务</li>\n<li>消息中间件</li>\n<li>任务系统</li>\n<li>微服务面临的问题</li>\n<li>Gateway，单一接入点</li>\n<li>API解耦 —— GraphQl</li>\n<li>请求变重</li>\n<li>API 数量暴增</li>\n<li>重点介绍</li>\n<li>原来：（在分布式系统中，原来的方式有限制）</li>\n<li>现在：</li>\n<li>事物使用DB保证</li>\n<li>使用DB锁防止数据冲突</li>\n<li>使用消息中间件服务</li>\n<li>CQRS (used with Event Sourcing) Command Query Responsibility Segregation, 命令查询职责分离模式</li>\n<li>Event Sourcing (事件数据库)，保证最终一致性</li>\n<li>以订单&amp;支付为例子，讲解遇到的问题如何解决</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>听众需要自己去判断分享者说的内容是不是对的。</li>\n<li>要注意分享者说的内容，是不是真的是微服务的关键，或者说，分享者 “拼接”一个微服务的架构出来以后，是不是真的就是微服务了？（需要思考有没有必要，是不是切合业务需求，是不是能解决现有或者未来会出现的问题？）</li>\n</ul>\n<h4>感想</h4>\n<p>讲师后面的技术方案其实在业内是属于比较常见、通用的编程模型，其实没有必要非要往微服务上面靠\n。分享后半部分虽然能从问题产生的根源上面来逐步引入解决方案，但是缺失一个总体上的陈述，所以导致听者比较难以跟上节奏。另外限于时间上的限制，很多关键技术点并没有展开讲解，所以听众可以再拿着PPT，针对讲师没有细说的各个技术点自己做下功课，然后去辩证的理解和学习。</p>\n<h2>9月4日上午</h2>\n<h3>单页应用“联邦制”实践</h3>\n<h4>讲师</h4>\n<p>孙坤鹏， UCloud前端负责人</p>\n<h4>主题</h4>\n<ul>\n<li>Ucloud 大规模单页面应用的一些特性</li>\n<li>稳定性 —— 2B业务的天然特性</li>\n<li>灰度 —— 流控、分流</li>\n<li>遇到的问题</li>\n<li>多产品灰度，节奏冲突</li>\n<li>多租户 （其实不是多租户的概念，应该是OEM或者产品定制化的问题）</li>\n<li>问题的旧的解决方案</li>\n<li>集中制</li>\n<li>灰度、稳定版本并行</li>\n<li>无视产品定制化</li>\n<li>问题的新的解决方案 —— 联邦制</li>\n<li>单页面、多应用</li>\n<li>模块单独治理</li>\n<li>支撑体系</li>\n<li>分模块加载机制以及相应的架构支撑</li>\n<li>动态配置+默认配置+静态配置 =&gt; 合并路由及配置 （failover方案，主要是为了保证任何异常情况下，用户看到的都是可接受的、可用的应用）</li>\n<li>配置&amp;灰度系统 （关注每个用户都有一个单独配置背后的技术支撑）</li>\n<li>针对配置的一些优化，包括只输出顶级路由信息，子路由交给静态代码</li>\n<li>后续规划</li>\n<li>架构优化调整 （最终实现多版本在线并存，目前受限于angularjs的运行时机制）</li>\n<li>支撑完善</li>\n<li>自动化流程 （灰度的自动化）</li>\n<li>平台化、组件化 （目前和阿里云的技术方案比，尚处于初中级阶段）</li>\n<li>开放 （通过开放，来帮助面临共同业务场景的团队解决问题）</li>\n<li>情怀？ =&gt; 招聘！</li>\n</ul>\n<h3>关注点</h3>\n<ul>\n<li>如何从面临的业务问题一步一步做优化，完善出合理的技术方案来解决困局。</li>\n</ul>\n<h3>感想</h3>\n<p>与UCloud的 联邦单页面业务场景对比，阿里云虽然是 “诸侯” 制，虽然不同的产品有独立的域名独立维护，但是不论在前端方面还是在后端支撑方面其实都面临同样的问题，只是由于产品拆分独立以后，每个产品的规模减小，所以最终只有部分业务线的产品会面临动态按需加载、资源优化等问题，这些问题双方解决的思路也是一致的。在服务端支撑上面，双方的思路也基本一致，包括用户级别的灰度配置、failover方案等等。</p>\n<h3>前端 DevOps 实践</h3>\n<h4>讲师</h4>\n<p>王龑 from OneApm</p>\n<h4>主题</h4>\n<ul>\n<li>公司背景介绍</li>\n<li>DevOps</li>\n<li>前端技术栈</li>\n<li>react</li>\n<li>es2015</li>\n<li>webpack</li>\n<li>cdn</li>\n<li>讲师做DevOps的前因后果 —— 一次IE排除故障的经历。<strong>（问题本身没什么，主要是解决问题的过程和后续的落地行动。一个问题解决以后其他人都不会再犯同样的问题，才算是真正解决了）</strong></li>\n<li>DNS记录管理工具 （依然是从日常开发中具体的问题入手，落地解决。这种模式是很好的需求驱动技术进阶的方式）</li>\n<li>jenkins pipeline 对前端发布流程的自动化和规范化改进</li>\n<li>DevOps三种方法</li>\n<li>系统化思考</li>\n<li>缩短反馈环节</li>\n<li>持续的实践</li>\n<li>DevOps的四个支柱</li>\n<li>文化 （从微小的问题入手，落地解决，逐渐积累）</li>\n<li>工具 （自动化构建工具）</li>\n<li>度量</li>\n<li>分享 （实践、优化、分享，形成良性循环）</li>\n<li>推广时间 —— 使用 Sentry 监控线上报错 (虽然是软广告，但是开发者应该思考自己的业务线是否应该也有一套这样的线上监控系统，而不是被动等待用户上报问题？)</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>讲师实际案例中，面对问题时如何做处理，解决问题以后，后续的行动进行落地，把问题彻底解决掉</li>\n<li>通过微小而有益的改进来不断解决开发过程中遇到的各种问题，从而形成一个比较完善的Dev-Ops期间的工具链</li>\n<li>devops对应研发生命周期各个阶段的范围图</li>\n</ul>\n<h4>感想</h4>\n<p>其实讲师讲的内容还是属于前端工程化中需要做的一些事情，而前端工程化也确实可以反过来被总结为是 DevOps 在前端开发领域的一个细分。听讲师在分享的时候，可以很清晰地感受到他以及他所在团队在做事时的风格，能把所有有碍于效率提升的各种问题逐渐解决掉，这种执行力是值得学习的。</p>\n<h3>Node.js在线性能调优与故障排查</h3>\n<h4>讲师</h4>\n<p>朴灵 from Aliyun, alinode</p>\n<h4>主题</h4>\n<ul>\n<li>三件事</li>\n<li>CPU 飙高</li>\n<li>内存泄漏</li>\n<li>垃圾回收频繁</li>\n<li>三个案例—— CPU 问题</li>\n<li>分析资料：*.cpuprofile</li>\n<li>收集工具</li>\n<li>分析工具</li>\n<li>实际解决思路： 使用异步操作替代阻塞型操作，让计算密集型的逻辑交给nodejs线程池完成，不阻塞web主流程</li>\n<li>v8-profiler/node-inspector</li>\n<li>alinode</li>\n<li>chrome dev tools</li>\n<li>wrk 压测</li>\n<li>解决问题：</li>\n<li>三个案例 —— 内存泄漏</li>\n<li>分析资料：*.heapsnapshot</li>\n<li>收集工具</li>\n<li>分析工具</li>\n<li>思路：</li>\n<li>v8-profiler/node-inspector</li>\n<li>alinode</li>\n<li>chrome dev tools （heapSnapshot文件过大时，不具备可用性；对于匿名对象也不能精准定位）</li>\n<li>针对有类名的对象，直接使用 chrome dev tools查看即可</li>\n<li>针对无类名的匿名对象，分析无类名的对象引用关系</li>\n<li>解决问题：</li>\n<li>三个案例 —— GC频繁</li>\n<li>针对有类名的对象，直接使用 chrome dev tools查看即可</li>\n<li>针对无类名的匿名对象，分析无类名的对象引用关系</li>\n<li>alinode GC 分析</li>\n<li>node --trace_gc --trace_gc_verbose 应用启动文件.js</li>\n<li>alinode</li>\n<li>分析资料：gc trace log 或 *.heaptimeline文件</li>\n<li>收集工具</li>\n<li>分析工具</li>\n<li>思路：</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>通过日常代码规避可能会引起的各种问题</li>\n</ul>\n<h4>感想</h4>\n<p>时间略短，demo略仓促</p>\n<h3>Learning design patterns from modern JavaScript frameworks</h3>\n<h4>讲师</h4>\n<p>Fraser Xu from Envato</p>\n<h4>主题</h4>\n<ul>\n<li>什么是设计模式</li>\n<li>建筑设计模式</li>\n<li>软件设计模式</li>\n<li>JQuery</li>\n<li>MVC、MV*</li>\n<li>函数式编程</li>\n<li>单纯、职责单一的function，一个输入会有对应的固定的输出。</li>\n<li>高阶函数</li>\n<li>Type System: typescript 、flow、elm ### 关注点</li>\n<li>讲师分享中，提到的各种框架的一些编程模式</li>\n</ul>\n<h4>感想</h4>\n<p>其实讲师的分享本身更侧重于基于框架的编程模式，而不是传统的设计模式的讨论与讲解。在开始阶段讲师作了调研，问是不是有人认为函数式编程比面向对象编程更好，调查结论是有些人会举手示意。其实针对这个问题，不应该认为一种编程方式比另外一种编程方式更好，而是要知道各自在不同的领域下都有其优势的方面。其实面向对象也好，函数式编程也好，不要相互排斥，该用面向对象程序设计思维去做产品整体架构的地方，不要在战略上偷懒，觉得短平快就是好的，设计是过度的；该利用函数式编程的优势解决技术细节的地方，也不要觉得函数式编程过于自由，有些是奇技淫巧不入流，而是充分考虑业务场景的需要，把过于自由的一些技巧，规范在可扩展易维护的框架内部，这样各有所长共同发挥出最大的价值。单纯的由于某个原因支持一方、鼓吹夸大一方的价值、以优势比较另外一方的劣势，都是在不负责地引导新人，是基于个人情感的耍流氓。所以要小心有人信誓旦旦地去安利某个编程方式而贬低另外一种编程方式。在我的实际编程工作中，基本上面向对象设计和函数式编程都在利用，而鉴于目前很多前端开发者在面向对象程序设计技能上有欠缺，所以会告诉他们，如何在自己的业务场景中，使用设计模式的思路去写出易扩展易维护的代码。设计模式不关心实现细节，它关心的是实现细节所支撑的业务场景能不能符合开放封闭原则，代码能不能做到职责单一原则。</p>\n<h2>9月4日下午</h2>\n<h3>面向未来的自动化测试-Macaca</h3>\n<h4>讲师</h4>\n<p>徐达峰, from Alipay</p>\n<h4>主题</h4>\n<ul>\n<li>自动化测试的原因</li>\n<li>WEB工程化演进节奏越来越快</li>\n<li>版本分化频繁</li>\n<li>技术选型趋向于混合</li>\n<li>虽然传统的自动化测试能够解决一些问题，但是依照目前的业务场景来看还远远不够</li>\n<li>运行时的测试</li>\n<li>运行环境差异</li>\n<li>数据源</li>\n<li>自动化 即是 软件开发 ？</li>\n<li>UT、组件测试</li>\n<li>集成测试</li>\n<li>功能性测试</li>\n<li>端到端测试</li>\n<li>测试金字塔 （以下列出的点由上到下投入依次递减）</li>\n<li>macaca的由来 ：猴类，敏捷灵动</li>\n<li>依据w3c webDriver 标准</li>\n<li>基于nodejs</li>\n<li>多端运行，设备代理层是关键</li>\n<li>持续集成</li>\n<li>Gitlab-CI</li>\n<li>jenkins</li>\n<li>Gerrit</li>\n<li>Travis-CI</li>\n<li>Reliable , nodejs实现的自主研发</li>\n<li>性能压测</li>\n<li>在测试时，即进行相关指标的采集</li>\n<li>研发周期内的工作流</li>\n<li>webDriver Cloud，用来做兼容性测试， F2ETest</li>\n<li>基于游戏框架的应用测试</li>\n<li>服务端基于nodejs，客户端多编程语言的支持</li>\n<li>遇到的问题</li>\n<li>框架的windows兼容性</li>\n<li>安卓 UTF-7 ?</li>\n<li>IOS 虚拟化</li>\n<li>未来：跨三端的自动录入功能</li>\n<li>macaca 3月12日开源</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>macaca的分布式主从架构设计</li>\n<li>研发周期内的工作流</li>\n<li>F2ETest系统的搭建</li>\n</ul>\n<h4>感想</h4>\n<p>关于自动化测试，公共组件的UT不可少，这是底线，UI集成测试、端到端的场景测试，很难做起来，如果没有专业的测试团队做支持，肯定是步履维艰。这里说的专业的测试团队，一是指技术上专业，引入相关工具、系统，引入标准化的测试流程，二是指专职做测试，能够针对产品的迭代更新对应的case。如果单单靠开发做场景测试，依照目前大多数产品的迭代速度和产品的生命周期，完全来不及，所以开发人员要守住底线，UT保证质量。</p>\n<h3>Managing Async with RxJS 5 at Netflix</h3>\n<h4>讲师</h4>\n<p>Ben Lesh from Netflix</p>\n<h4>主题</h4>\n<ul>\n<li>RxJs 5</li>\n<li>避免不必要的代码运行，节省计算资源（取决于Netflix自己的业务特征，移动端、视频终端的运行环境）</li>\n<li>web开发中的几种异步场景</li>\n<li>ajax</li>\n<li>user events</li>\n<li>animation</li>\n<li>sockets</li>\n<li>workders</li>\n<li>callback、promise 的问题</li>\n<li>回调地狱</li>\n<li>异步请求的顺序问题在同步流程业务中需要代码保证，并且复杂</li>\n<li>迭代器</li>\n<li>Observeable, the “dual” of iterator</li>\n<li>可以从各种异步场景中创建obverseable对象</li>\n<li>能够适应各种数字、各种程度的异步延时</li>\n<li>lazy(非及时执行)</li>\n<li>可取消的</li>\n<li>RxJs 的一些示例</li>\n<li>mergeAll (并行，并保证全部异步操作完成)</li>\n<li>concatAll （串行，异步操作以顺序完成）</li>\n<li>switch （并行，单项异步操作完成后即当前异步停止，不再被订阅）</li>\n<li>RxJs 目前的夸语言情况</li>\n<li>在线演示 Rxjs 在 自动补全组件中的能力，可以看到在快速输入的情况下，可以取消掉之前的异步请求</li>\n<li>multiplexed socket 场景下原始开发模式和Rxjs开始的代码对比</li>\n<li>Rxjs 5 的新特性</li>\n<li>优点</li>\n<li>模型化各种场景的异步操作</li>\n<li>声明式的、表达式</li>\n<li>模块化</li>\n<li>覆盖各种异步场景</li>\n<li>缺点</li>\n<li>60+ operators</li>\n<li>学习曲线</li>\n<li>对同步、一步的疑惑</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>讲师提到的现有各种异步场景的处理在某些场合下的缺点，例如 promise无法取消、普通异步场景中的“回调地狱”问题。</li>\n<li>Rxjs所带来的新的编程方式背后的思想</li>\n</ul>\n<h4>感想</h4>\n<p>Rxjs的出现再一次证明了业务推动技术发展这一现象。讲师从自己的业务需求出发，在受到已有异步处理方案的困扰以后通过针对性的改进，开发出了Rxjs。</p>\n<h3>移动海量服务下基于React的高性能同构实践</h3>\n<h4>讲师</h4>\n<p>梁伟盛 Tencent Now 直播，架构师</p>\n<h4>主题</h4>\n<ul>\n<li>简单讲了web开发的发展历程 （从变迁看到0-1再从1-0，引出了服务器直接同构渲染的直接原因）</li>\n<li>一处编写，到处运行</li>\n<li>reactjs的出现，使服务端、客户端代码同构成为可能。</li>\n<li>性能优化</li>\n<li>从网络层入手，减少web端请求（使用服务端直出）</li>\n<li>首屏优化，深入业务场景进行非必要数据的切除。</li>\n<li>使用UDP协议替换TCP</li>\n<li>使用二进制数据协议（Protocol Buffer）替代以往的json协议</li>\n<li>故障情况下的failover方案</li>\n<li>页面功能组件化</li>\n<li>组件实现降级服务配置化</li>\n<li>分级缓存机制配合默认数据，一级缓存服务端依赖catch服务，二级缓存使用localStorage</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>需要听者仔细思考目前的前后端分离和讲师讲的页面直出的辩证的对比关系，即：</li>\n<li>在讲师所在的直播业务场景（更准确地讲，是移动直播业务场景）中，页面简单，意味着服务端直出页面数据量(或者说html字符串长度)不会太大，数据量带来的网络传输消耗可以抵消甚至是小于以往前后端分离技术方案中的逻辑脚本拉取时间。</li>\n<li>在普通的企业级单页面应用场景中，页面结构虽然简单，但是首屏数据所构建出的HTML字符串的数据量很大，数据传输时间反而要比先加载纯业务脚本，再拉取数据进行客户端渲染的时间长（具体问题具体分析，多数场景中可能性非常大）。</li>\n<li>所以听众需要具体分析讲师所讲内容的前提，分析对应业务场景面临的真正问题，做针对性的优化，必要时可以果断抛弃业内通用的技术方案，采取最合适的。</li>\n<li>讲师在整个性能优化过程中抽丝剥茧步步为营地分析、针对性优化的思路很值得学习。</li>\n</ul>\n<h4>感想</h4>\n<p>讲师讲的内容总体来看非常清晰，能够抽丝剥茧，而且整个优化过程贯穿于整个业务发展的各个周期，对于很多新的业务具有很高的参考价值，可以提前采取相应的技术策略来避免后期的技术债务。</p>\n<h3>Build a Better App with Mapbox</h3>\n<h4>讲师</h4>\n<p>Peter Liu from Mapbox</p>\n<h4>主题</h4>\n<ul>\n<li>Data Source: OpenSteetMap</li>\n<li>数据量大的情况下，需要合理的数据结构提供 “必需” 的数据</li>\n<li>vector tiles，不同规模下的地图分成小的切块，每次只更新视图内的数据</li>\n<li>数据中心的数据更新问题</li>\n<li>开发套件： studio、vector tiles、Mapbox GL、Satelite、Location APIs、Turf.js(spatial analysis)</li>\n<li>如何使用开发套件：</li>\n<li>引入js、css文件</li>\n<li>初始化地图实例</li>\n<li>实际案例</li>\n<li>Bike trip planner : 300+ lines of code (骑行导航、路径规划、可视化海拔)</li>\n<li>物流系统的配送规划，实时配送状态展示</li>\n<li>fitness tracking app</li>\n<li>未来规划</li>\n<li>MapBox Drive</li>\n</ul>\n<h3>关注点</h3>\n<ul>\n<li>讲师的实际案例</li>\n</ul>\n<h4>感想</h4>\n<p>讲师的英文非常牛，基本上和native speakers差不多了，是时候把英语口语加强了。</p>\n<h3>DevTools for the Progressive Web</h3>\n<h4>讲师</h4>\n<p>Kenneth Auchenberg from Microsoft</p>\n<h4>主题</h4>\n<ul>\n<li>web 和 web开发，作为讲师主题的上下文。</li>\n<li>网页形态的变迁</li>\n<li>互联网到移动互联网的变迁</li>\n<li>PC端、移动端浏览器的变迁</li>\n<li>浏览器引擎的变迁</li>\n<li>网页容器的变迁</li>\n<li>web assimbliy</li>\n<li>关于前端开发的思考</li>\n<li>对前端开发的思考：使用js在服务端推送数据在安卓设备显示消息，那么我们还是前端开发者吗？</li>\n<li>在这种场景下，开发工具是否跟上了这种变迁节奏？</li>\n<li>典型的前端调试工作流，中间有大量的重复性的、不流畅的（不流畅是因为在浏览器和编辑器中间多次切换）调试过程</li>\n<li>引出讲师的主题，让浏览器中的开发者工具和开发者自己的编辑器能够交流沟通</li>\n<li>演示 Visual Code Editor的debug功能，和Chrome浏览器的互动</li>\n<li>VS Code 与 chrome、Edge、nodejs交互的架构图</li>\n<li>VS Code 的调试能力与移动端的系统对接，支持IOS代码调试等等</li>\n<li>讲师的思考：为什么浏览器需要开发者工具？很多普通用户不懂相关的技术，反而会对误入开发者模式的普通用户造成非常大的困扰甚至是安全隐患</li>\n</ul>\n<h4>关注点</h4>\n<ul>\n<li>VS Code和浏览器互动体系的架构，chrome 调试协议 + Edge 适配器，来支持chrome和Edge</li>\n</ul>\n<h4>感想</h4>\n<p>讲师的分享非常有启发性，通过自己的问题引发听众的思考。</p>\n</div>',
      'title': 'JSConf 中国2016 PPT 分享汇总与发票问题'      
    },
    {      
      'content': '<div class="markdown-text"><p><a href="https://blog.risingstack.com/node-js-developer-survey-results-2016/">https://blog.risingstack.com/node-js-developer-survey-results-2016/</a></p>\n</div>',
      'title': '[转] How Developers use Node.js - Survey Results'      
    },
    {      
      'content': '<div class="markdown-text"><p>本人前端，用某平台的开发app有一年多时间，现在对nodejs产生浓厚兴趣 ，学习一段时间，能搭建些小项目 ，但是对接触大点的项目，如app的需要电商，等复杂功能，好迷茫。怎样架构能支持app所需的各种需求。还是说 需要其他语言配合  。</p>\n</div>',
      'title': '怎样的架构，可以支持app的电商，小团队好迷茫。'     
    },
    {     
      'content': '<div class="markdown-text"><p>如果自己在国外有个VPS，那么自己建立一个翻墙代理，用什么最好最稳定？</p>\n</div>',
      'title': '自己建立VPN用什么最好最稳定？'    
    },
    {      
      'content': '<div class="markdown-text"><p>nodejs（cluster） 长连接 redis【<a href="http://www.cnblogs.com/laozhbook/p/nodejs_redis_connection_pool.html?utm_mediu%E3%80%91">http://www.cnblogs.com/laozhbook/p/nodejs_redis_connection_pool.html?utm_mediu】</a> ,每一个进程创建一个redis连接。但是， 每天有那么几分钟会出现大量的read ETIMEOUTOUT的错误，通过info clients 查看用户连接数，发现连接数每天会增加60-70个。当然，按照常理应该是维持在一个稳定的数量区间。nodejs 每天访问redis次数近一千万。请大神给出解答。</p>\n</div>',
      'title': 'nodejs连接redis 总是会出现read ETIMEOUT的错误'      
    }
  ]

 module.exports = posts